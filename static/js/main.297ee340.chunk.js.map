{"version":3,"sources":["components/todo-list-item.js","components/todo-list.js","components/tag-filter.js","data/notes-data.js","components/todo-list-add-note.js","components/app.js","index.js"],"names":["TodoListItem","id","note","tags","isFiltered","onDeleted","onDeletedTag","onEdited","useState","isEditing","setIsEditing","newTextOfNote","setNewTextOfNote","tagsFormatted","forEach","item","push","className","onClick","value","tagsFormattedWithConditionalRendering","length","onSubmit","e","preventDefault","placeholder","onChange","target","type","tagsFormattedWhenFiltered","TodoList","notes","map","TagFilter","onTagsFiltered","onFilterReset","tagsMapped","data","TodoListAddNote","onAdded","input","setInput","findHashtags","text","hashtags","match","ejectHashtagsFromText","join","App","setNotes","setIsFiltered","notesBeforeFilter","setNotesBeforeFilter","Set","nanoid","customAlphabet","add","useEffect","document","title","notesWithNewItem","parseInt","notesCopy","arrOfFilteredValues","filteredData","filter","i","hashtagToDelete","indexOfItemWithTagToDelete","findIndex","indexOfItemToDelete","notesWithoutDeletedItem","slice","newText","newNotesArray","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.297ee340.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TodoListItem = ({ id, note, tags, isFiltered, onDeleted, onDeletedTag, onEdited }) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [newTextOfNote, setNewTextOfNote] = useState('');\r\n\r\n    const HandleChange = (e) => {\r\n        setNewTextOfNote(e.target.value);\r\n    }\r\n\r\n    const HandleSubmit = (e) => {\r\n        e.preventDefault();\r\n        onEdited(id, newTextOfNote);\r\n        setNewTextOfNote('');\r\n        setIsEditing(false);\r\n    }\r\n\r\n    const tagsFormatted = [];\r\n    tags.forEach(item => tagsFormatted.push(\r\n            <div className=\"list-of-notes__tag-and-button\">\r\n                <span>{ item }</span>\r\n                <hr className=\"vertical-line\" />\r\n                <button onClick={ onDeletedTag } value={ item }>X</button>\r\n            </div>\r\n        ));\r\n\r\n    const tagsFormattedWithConditionalRendering = (tagsFormatted.length > 0) ?\r\n            <div className=\"list-of-notes__note-tags-container\">\r\n                { tagsFormatted }\r\n            </div>\r\n        :\r\n            null;\r\n\r\n    if (isFiltered === false && isEditing === false) {\r\n        return (\r\n            <li className=\"list-of-notes__note\">\r\n                <div className=\"list-of-notes__buttons-container\">\r\n                    <button onClick={() => setIsEditing(true)}>edit</button>\r\n                    <button onClick={ onDeleted }>X</button>\r\n                </div>\r\n                <p className=\"list-of-notes__note-text\">{ note }</p>\r\n                <hr />\r\n                { tagsFormattedWithConditionalRendering }\r\n            </li>\r\n        );\r\n    }\r\n\r\n    if (isFiltered === false && isEditing === true) {\r\n        return (\r\n            <li className=\"list-of-notes__note\">\r\n                <form onSubmit={HandleSubmit}>\r\n                <textarea\r\n                    placeholder=\"Type in new text here\"\r\n                    value={newTextOfNote}\r\n                    onChange={HandleChange}\r\n                />\r\n                <div className=\"list-of-notes__note-edit-mode-buttons\">\r\n                    <input className=\"btn\" type=\"submit\" value=\"Save\"/>\r\n                    <button className=\"btn\" onClick={() => setIsEditing(false)}>Cancel</button>\r\n                </div>\r\n                </form>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    if (isFiltered) {\r\n        const tagsFormattedWhenFiltered = [];\r\n        tags.forEach(item => tagsFormattedWhenFiltered.push(<span>{ item }</span>));\r\n\r\n        return (\r\n            <li className=\"list-of-notes__note\">\r\n                <p className=\"list-of-notes__note-text\">{ note }</p>\r\n                <hr />\r\n                <div className=\"list-of-notes__tagsWhenFiltered\">\r\n                    { tagsFormattedWhenFiltered }\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListItem;","import React from 'react';\r\nimport TodoListItem from './todo-list-item';\r\n\r\nfunction TodoList ({ notes, isFiltered, onDeleted, onDeletedTag, onEdited }) {\r\n\r\n    const note = notes.map(\r\n            ({ id, note, tags }) => <TodoListItem\r\n                id={ id }\r\n                key={ id }\r\n                note={ note }\r\n                tags={ tags }\r\n                isFiltered={ isFiltered }\r\n                onDeleted= { () => onDeleted(id) }\r\n                onDeletedTag={ (e) => onDeletedTag(id, e) }\r\n                onEdited={ onEdited }\r\n            />\r\n        );\r\n\r\n    return (\r\n        <ul className=\"list-of-notes\">\r\n            { note }\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\nfunction TagFilter ({ tags, isFiltered, onTagsFiltered, onFilterReset }) {\r\n    const tagsMapped = [];\r\n\r\n    if (isFiltered) {\r\n        tagsMapped.push(\r\n            <button onClick={() => onFilterReset()}>Сбросить фильтр</button>\r\n        )\r\n    } else {\r\n        tags.forEach(item => tagsMapped.push(\r\n            <button value={item} onClick={() => onTagsFiltered(item)}>{item}</button>\r\n        ));\r\n    }\r\n\r\n    return <div className=\"tags-container\">{tagsMapped}</div>;\r\n}\r\n\r\nexport default TagFilter;","const data = [\r\n    {\r\n        id: 0,\r\n        note: \"Создание, редактирование, просмотр и удаление заметок\",\r\n        tags: [\"#редактирование\", \"#создание\"]\r\n    },\r\n    {\r\n        id: 1,\r\n        note: \"Фильтр заметок по тегу\",\r\n        tags: []\r\n    },\r\n    {\r\n        id: 2,\r\n        note: \"Добавление и удаление тегов из списка\",\r\n        tags: []\r\n    },\r\n    {\r\n        id: 3,\r\n        note: \"Данные хранить в json- файле\",\r\n        tags: [\"#Данные\"]\r\n    },\r\n    {\r\n        id: 4,\r\n        note: \"Данные хранить в файле\",\r\n        tags: [\"#Данные\", \"#хранить\"]\r\n    },\r\n    {\r\n        id: 5,\r\n        note: \"Новая заметка\",\r\n        tags: [\"#Новая\"]\r\n    }\r\n];\r\n\r\nexport default data;","import React, { useState } from 'react';\r\n\r\nconst TodoListAddNote = ({ onAdded, isFiltered }) => {\r\n    const [input, setInput] = useState('');\r\n\r\n    const OnTextChanged = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const OnTextSubmitted = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (input) onAdded(input);\r\n\r\n        setInput('');\r\n    }\r\n\r\n    if (isFiltered) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <form\r\n            className='add-note-container'\r\n            onSubmit={OnTextSubmitted}\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"new note\"\r\n                value={input}\r\n                onChange={OnTextChanged}\r\n            />\r\n            <button>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoListAddNote;","import React, { useState, useEffect } from 'react';\r\nimport { customAlphabet } from \"nanoid\";\r\nimport TodoList from './todo-list';\r\nimport TagFilter from \"./tag-filter\";\r\nimport data from '../data/notes-data';\r\nimport TodoListAddNote from \"./todo-list-add-note\";\r\n\r\nfunction findHashtags (text) {\r\n    const regexHashtags = /#\\S*/ig;\r\n    const hashtags = text.match(regexHashtags);\r\n\r\n    return hashtags ? hashtags : [];\r\n}\r\n\r\nfunction ejectHashtagsFromText (text) {\r\n    const regexAvoidOnlyHashTags = /[^#]/g;\r\n\r\n    return text.match(regexAvoidOnlyHashTags).join('');\r\n}\r\n\r\nfunction App () {\r\n    const [notes, setNotes] = useState(data);\r\n    const [isFiltered, setIsFiltered] = useState(false);\r\n    const [notesBeforeFilter, setNotesBeforeFilter] = useState([]);\r\n\r\n    const tags = new Set();\r\n    // generate unique id\r\n    const nanoid = customAlphabet('0123456789', 5);\r\n    // fill the set with unique tag values from 'notes'\r\n    notes.forEach(item =>\r\n        item.tags.forEach(item => tags.add(item))\r\n    );\r\n\r\n    const AddNote = (text) => {\r\n        const notesWithNewItem = [...notes];\r\n\r\n        notesWithNewItem.push({\r\n            id: parseInt(nanoid()),\r\n            note: ejectHashtagsFromText(text),\r\n            tags: findHashtags(text)\r\n        });\r\n\r\n        setNotes(notesWithNewItem);\r\n    };\r\n\r\n    const EditNote = (id, newText) => {\r\n        const newNotesArray = [];\r\n\r\n        notes.map(item => {\r\n            if (id === item.id) {\r\n                return newNotesArray.push({\r\n                    id,\r\n                    note: ejectHashtagsFromText(newText),\r\n                    tags: findHashtags(newText)\r\n                });\r\n            }\r\n            return newNotesArray.push(item);\r\n        });\r\n\r\n        setNotes(newNotesArray);\r\n    };\r\n\r\n    const DeleteNote = (id) => {\r\n        const indexOfItemToDelete = notes.findIndex(item => item.id === id);\r\n        const notesWithoutDeletedItem = [\r\n            ...notes.slice(0, indexOfItemToDelete),\r\n            ...notes.slice(indexOfItemToDelete + 1)\r\n        ];\r\n\r\n        setNotes(notesWithoutDeletedItem);\r\n    };\r\n\r\n    const DeleteTag = (id, e) => {\r\n        e.preventDefault();\r\n        const notesCopy = [...notes];\r\n        const hashtagToDelete = e.target.value;\r\n        const indexOfItemWithTagToDelete = notes\r\n            .findIndex(item => item.id === id);\r\n        // filter out deleted tag\r\n        notesCopy[indexOfItemWithTagToDelete][\"tags\"] =\r\n            notes[indexOfItemWithTagToDelete][\"tags\"]\r\n                .filter(item => item !== hashtagToDelete);\r\n\r\n        setNotes(notesCopy);\r\n    };\r\n\r\n    const FilterNotes = (value) => {\r\n        setNotesBeforeFilter(notes);\r\n\r\n        const notesCopy = [...notes];\r\n        const arrOfFilteredValues = [];\r\n        const filteredData = [];\r\n        notesCopy.map(item => arrOfFilteredValues.push(item.tags.filter(item => item === value)));\r\n        for (let i = 0; i < notesCopy.length; i++) {\r\n            if (arrOfFilteredValues[i].length > 0) {\r\n                filteredData.push(notesCopy[i])\r\n            }\r\n        }\r\n\r\n        setIsFiltered(true);\r\n        setNotes(filteredData);\r\n    }\r\n\r\n    const ResetFilter = () => {\r\n        setNotes(notesBeforeFilter);\r\n        setIsFiltered(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = `Кол-во заметок: ${notes.length}`;\r\n    });\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1>Todo Application</h1>\r\n            <TodoListAddNote\r\n                onAdded={ AddNote }\r\n                isFiltered={ isFiltered }\r\n            />\r\n            <TagFilter\r\n                tags={ [...tags] }\r\n                isFiltered={ isFiltered }\r\n                onTagsFiltered={ FilterNotes }\r\n                onFilterReset={ ResetFilter }\r\n            />\r\n            <TodoList\r\n                notes={ notes }\r\n                isFiltered={ isFiltered }\r\n                onDeletedTag = { DeleteTag }\r\n                onDeleted={ DeleteNote }\r\n                onEdited={ EditNote }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\nimport \"./style/style.css\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}